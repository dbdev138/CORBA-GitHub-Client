package APIConnection;


/**
* APIConnection/_GitHubStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from API.idl
* Thursday, 31 March 2016 12:29:02 o'clock BST
*/

public class _GitHubStub extends org.omg.CORBA.portable.ObjectImpl implements APIConnection.GitHub
{

  public void getBasicUserData (String userName, APIConnection.Client client)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getBasicUserData", true);
                $out.write_string (userName);
                APIConnection.ClientHelper.write ($out, client);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                getBasicUserData (userName, client        );
            } finally {
                _releaseReply ($in);
            }
  } // getBasicUserData

  public void getRepoDetails (String userName, String repo, APIConnection.Client client)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getRepoDetails", true);
                $out.write_string (userName);
                $out.write_string (repo);
                APIConnection.ClientHelper.write ($out, client);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                getRepoDetails (userName, repo, client        );
            } finally {
                _releaseReply ($in);
            }
  } // getRepoDetails

  public void getDeveloperLanguages (String userName, String repo, APIConnection.Client client)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getDeveloperLanguages", true);
                $out.write_string (userName);
                $out.write_string (repo);
                APIConnection.ClientHelper.write ($out, client);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                getDeveloperLanguages (userName, repo, client        );
            } finally {
                _releaseReply ($in);
            }
  } // getDeveloperLanguages

  public void getRepoCount (String userName, APIConnection.Client client)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getRepoCount", true);
                $out.write_string (userName);
                APIConnection.ClientHelper.write ($out, client);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                getRepoCount (userName, client        );
            } finally {
                _releaseReply ($in);
            }
  } // getRepoCount

  public void getCloneUrl (String userName, String repoName, APIConnection.Client client)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getCloneUrl", true);
                $out.write_string (userName);
                $out.write_string (repoName);
                APIConnection.ClientHelper.write ($out, client);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                getCloneUrl (userName, repoName, client        );
            } finally {
                _releaseReply ($in);
            }
  } // getCloneUrl

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:APIConnection/GitHub:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _GitHubStub
