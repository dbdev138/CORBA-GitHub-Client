package APIConnection;


/**
* APIConnection/_GitHubImplBase.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from API.idl
* Thursday, 31 March 2016 12:29:02 o'clock BST
*/

public abstract class _GitHubImplBase extends org.omg.CORBA.portable.ObjectImpl
                implements APIConnection.GitHub, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors
  public _GitHubImplBase ()
  {
  }

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("getBasicUserData", new java.lang.Integer (0));
    _methods.put ("getRepoDetails", new java.lang.Integer (1));
    _methods.put ("getDeveloperLanguages", new java.lang.Integer (2));
    _methods.put ("getRepoCount", new java.lang.Integer (3));
    _methods.put ("getCloneUrl", new java.lang.Integer (4));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // APIConnection/GitHub/getBasicUserData
       {
         String userName = in.read_string ();
         APIConnection.Client client = APIConnection.ClientHelper.read (in);
         this.getBasicUserData (userName, client);
         out = $rh.createReply();
         break;
       }

       case 1:  // APIConnection/GitHub/getRepoDetails
       {
         String userName = in.read_string ();
         String repo = in.read_string ();
         APIConnection.Client client = APIConnection.ClientHelper.read (in);
         this.getRepoDetails (userName, repo, client);
         out = $rh.createReply();
         break;
       }

       case 2:  // APIConnection/GitHub/getDeveloperLanguages
       {
         String userName = in.read_string ();
         String repo = in.read_string ();
         APIConnection.Client client = APIConnection.ClientHelper.read (in);
         this.getDeveloperLanguages (userName, repo, client);
         out = $rh.createReply();
         break;
       }

       case 3:  // APIConnection/GitHub/getRepoCount
       {
         String userName = in.read_string ();
         APIConnection.Client client = APIConnection.ClientHelper.read (in);
         this.getRepoCount (userName, client);
         out = $rh.createReply();
         break;
       }

       case 4:  // APIConnection/GitHub/getCloneUrl
       {
         String userName = in.read_string ();
         String repoName = in.read_string ();
         APIConnection.Client client = APIConnection.ClientHelper.read (in);
         this.getCloneUrl (userName, repoName, client);
         out = $rh.createReply();
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:APIConnection/GitHub:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }


} // class _GitHubImplBase
